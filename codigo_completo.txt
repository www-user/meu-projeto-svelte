import adapter from '@sveltejs/adapter-auto';
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

/** @type {import('@sveltejs/kit').Config} */
const config = {
  // ATENÇÃO: A opção 'runes' deve estar no nível raiz, fora do objeto 'kit'.
  runes: true,

  kit: {
    adapter: adapter(),
  },

  preprocess: vitePreprocess()
};

export default config;
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';
import basicSsl from '@vitejs/plugin-basic-ssl';

export default defineConfig({
	plugins: [
		sveltekit(),
		basicSsl()
	],
	server: {
		// Fixa a porta de desenvolvimento para 5174
		port: 5174
	}
});
<script>
  import '../app.css';
</script>

<div class="site-container">
  <main>
    <slot />
  </main>
</div>

<style>
  .site-container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }
  main {
    flex-grow: 1;
  }
</style>
import type { PageLoad } from './$types';
import { apiPlugin, storyblokInit, useStoryblokApi } from '@storyblok/svelte';
import type { Influencer } from '$lib/types';

interface RawStoryblokStory {
	id: number;
	content: {
		nome: string;
		arroba: string;
		nicho: string;
		bio: string;
		foto_url: { filename: string };
		foto_placeholder_url: { filename: string };
		instagram_link: { url: string };
		contato_link: { url: string };
		video_url: { url: string };
	};
}

export const load: PageLoad = async () => {
	// Acessamos a variável de ambiente diretamente do objeto 'import.meta.env' do Vite
	const accessToken = import.meta.env.VITE_STORYBLOK_ACCESS_TOKEN;

	storyblokInit({
		accessToken: accessToken,
		use: [apiPlugin]
	});

	const storyblokApi = useStoryblokApi();

	try {
		const { data } = await storyblokApi.get('cdn/stories', {
			content_type: 'influencer',
			version: 'published'
		});
		const influencers: Influencer[] = data.stories.map((story: RawStoryblokStory & { slug: string }) => {
			return {
				id: story.id,
				slug: story.slug, // <-- ADICIONADO
				nome: story.content.nome,
				arroba: story.content.arroba,
				nicho: story.content.nicho,
				bio: story.content.bio,
				foto_url: story.content.foto_url.filename,
				foto_placeholder_url: story.content.foto_placeholder_url.filename,
				instagram_link: story.content.instagram_link.url,
				contato_link: story.content.contato_link.url,
				video_url: story.content.video_url.url,
			};
		});
		return {
			influencers
		};

	} catch (error) {
		console.error('Erro ao buscar ou mapear dados do Storyblok:', error);
		return {
			influencers: []
		};
	}
};
<script lang="ts">
	import InfluencerCard from '$lib/components/InfluencerCard.svelte';
	import VideoModal from '$lib/components/VideoModal.svelte';
	import { fly } from 'svelte/transition';
	import { page } from '$app/stores';
	import type { Influencer } from '$lib/types';

	$: data = $page.data;
	let activeNicho = 'todos';

	$: nichos = data.influencers
		? ['todos', ...new Set(data.influencers.map((i: Influencer) => i.nicho))]
		: ['todos'];

	$: filteredInfluencers =
		!data.influencers
			? []
			: activeNicho === 'todos'
			? data.influencers
			: data.influencers.filter((i: Influencer) => i.nicho === activeNicho);
</script>

<div class="container">
	<header class="page-header">
		<h1 in:fly={{ y: -20, duration: 600, delay: 200 }}>Connect</h1>
		<p class="subtitle" in:fly={{ y: -20, duration: 600, delay: 300 }}>
			Conectando marcas e criadores de conteúdo em sua cidade.
		</p>
	</header>

	<div class="filtros-container" in:fly={{ y: -20, duration: 600, delay: 400 }}>
		{#each nichos as nicho}
			<button
				class="filtro-btn"
				class:active={nicho === activeNicho}
				on:click={() => (activeNicho = nicho)}
			>
				{nicho}
			</button>
		{/each}
	</div>

	{#if filteredInfluencers && filteredInfluencers.length > 0}
		<div class="grid">
			{#each filteredInfluencers as influencer, i (influencer.id)}
				<div in:fly={{ y: 20, duration: 500, delay: 500 + i * 80 }} style="min-width: 0;">
					<InfluencerCard {influencer} />
				</div>
			{/each}
		</div>
	{:else}
		<p class="loading-state">Carregando influenciadores...</p>
	{/if}
</div>

<style>
	.container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 4rem 1.5rem;
	}
	.page-header {
		text-align: center;
		margin-bottom: 4rem;
	}
	h1 {
		font-family: var(--fonte-serif);
		font-size: 3rem;
		color: var(--cor-texto);
		font-weight: 700;
	}
	.subtitle {
		font-size: 1.1rem;
		color: var(--cor-texto-suave);
		margin-top: 0.75rem;
		max-width: 450px;
		margin-left: auto;
		margin-right: auto;
	}
	.filtros-container {
		display: flex;
		justify-content: center;
		flex-wrap: wrap;
		gap: 0.75rem;
		margin-bottom: 4rem;
	}
	.filtro-btn {
		background: transparent;
		color: var(--cor-texto-suave);
		border: 1px solid var(--cor-borda);
		padding: 0.5rem 1.25rem;
		border-radius: 50px;
		font-family: var(--fonte-sans);
		font-weight: 500;
		font-size: 0.9rem;
		cursor: pointer;
		text-transform: capitalize;
		transition: all 0.2s ease;
	}
	.filtro-btn:hover {
		border-color: var(--cor-destaque);
		color: var(--cor-destaque);
	}
	.filtro-btn.active {
		background: var(--cor-destaque);
		color: var(--cor-branca);
		border-color: var(--cor-destaque);
	}
	.grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
		gap: 2.5rem;
	}
	.loading-state {
		text-align: center;
		color: var(--cor-texto-suave);
		font-size: 1.2rem;
		padding: 4rem 0;
	}
</style>
<script lang="ts">
	import type { Influencer } from '$lib/types';
	const { influencer } = $props<{ influencer: Influencer }>();
	let loaded = $state(false);
</script>

<a href="/influencer/{influencer.slug}" class="card-link">
	<article class="card">
		<div class="image-container">
			<img
				src={influencer.foto_placeholder_url}
				alt=""
				class="placeholder"
				aria-hidden="true"
			/>
			<img
				src={influencer.foto_url}
				alt="Foto de {influencer.nome}"
				class="full-res"
				class:loaded
				onload={() => (loaded = true)}
				loading="lazy"
				decoding="async"
			/>
		</div>
		<div class="content">
			<h3>{influencer.nome}</h3>
			<p class="handle">@{influencer.arroba}</p>
			<div class="tag-wrapper">
				<span class="tag">{influencer.nicho}</span>
			</div>
			<div class="actions">
				<span class="btn btn-secondary">Instagram</span>
				<span class="btn btn-secondary">Contato</span>
				<span class="btn btn-primary">Ver Perfil</span>
			</div>
		</div>
	</article>
</a>

<style>
	.card-link {
		text-decoration: none;
		color: inherit;
		display: block;
		height: 100%;
	}
	.card {
		background: var(--cor-branca);
		border-radius: var(--raio-borda);
		border: 1px solid var(--cor-borda);
		overflow: hidden;
		display: flex;
		flex-direction: column;
		transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
		height: 100%;
	}
	.card-link:hover .card {
		transform: translateY(-8px);
		box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
	}
	.image-container {
		position: relative;
		width: 100%;
		aspect-ratio: 1 / 1;
		overflow: hidden;
	}
	.image-container img {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		object-fit: cover;
	}
	.placeholder { filter: blur(10px); }
	.full-res {
		opacity: 0;
		transition: opacity 0.5s ease-in;
	}
	.full-res.loaded { opacity: 1; }
	.card-link:hover .full-res.loaded {
		transform: scale(1.05);
		transition: transform 0.4s ease;
	}
	.content {
		padding: 1.5rem;
		display: flex;
		flex-direction: column;
		flex-grow: 1;
	}
	h3 {
		font-family: var(--fonte-serif);
		font-size: 1.5rem;
		color: var(--cor-texto);
		margin-bottom: 0.25rem;
	}
	.handle {
		color: var(--cor-texto-suave);
		margin-bottom: 1rem;
		font-size: 0.9rem;
	}
	.tag-wrapper { flex-grow: 1; }
	.tag {
		align-self: flex-start;
		background-color: #eef2ff;
		color: var(--cor-destaque);
		padding: 0.3rem 0.8rem;
		border-radius: 50px;
		font-size: 0.75rem;
		font-family: var(--fonte-sans);
		font-weight: 500;
		text-transform: capitalize;
	}
	.actions {
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		gap: 0.75rem;
		padding-top: 1.5rem;
	}
	.btn {
		padding: 0.75rem 0.5rem;
		font-size: 0.9rem;
		text-align: center;
		border-radius: 6px;
		font-family: var(--fonte-sans);
		font-weight: 500;
		transition: all 0.2s ease;
		text-decoration: none;
	}
	.btn-secondary {
		border: 1px solid var(--cor-borda);
		background: var(--cor-branca);
		color: var(--cor-texto-suave);
	}
	.btn-primary {
		border: 1px solid var(--cor-destaque);
		background: var(--cor-destaque);
		color: var(--cor-branca);
	}
</style>
<script lang="ts">
	import { createEventDispatcher } from 'svelte';
	import { fly, fade } from 'svelte/transition';

	export let videoUrl: string;
	export let isOpen: boolean;

	const dispatch = createEventDispatcher();

	function closeModal() {
		dispatch('close');
	}

	function handleKeydown(event: KeyboardEvent) {
		if (isOpen && event.key === 'Escape') {
			closeModal();
		}
	}

	let videoId = '';
	$: if (isOpen && videoUrl) {
		try {
			const patterns = [
				/(?:https?:\/\/)?(?:www\.)?youtube\.com\/watch\?v=([a-zA-Z0-9_-]{11})/,
				/(?:https?:\/\/)?(?:www\.)?youtu\.be\/([a-zA-Z0-9_-]{11})/,
				/(?:https?:\/\/)?(?:www\.)?youtube\.com\/embed\/([a-zA-Z0-9_-]{11})/
			];
			videoId = '';
			for (const pattern of patterns) {
				const match = videoUrl.match(pattern);
				if (match && match[1]) {
					videoId = match[1];
					break;
				}
			}
			if (!videoId) throw new Error('ID do vídeo não encontrado na URL');
		} catch (e) {
			console.error("Erro ao processar URL de vídeo:", videoUrl, e);
			videoId = '';
		}
	} else if (!isOpen) {
		videoId = '';
	}
</script>

<svelte:window on:keydown={handleKeydown} />

{#if isOpen}
    <div role="presentation" class="overlay" on:click|self={closeModal} transition:fade={{ duration: 200 }}>
		<div class="modal-content" transition:fly={{ y: -30, duration: 300 }} role="dialog" aria-modal="true">
			<button class="close-btn" on:click={closeModal} aria-label="Fechar modal">&times;</button>
			{#if videoId}
				<div class="video-container">
                    <iframe
						src="https://www.youtube.com/embed/{videoId}?autoplay=1&rel=0"
						title="YouTube video player"
						frameborder="0"
						allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
						allowfullscreen
					></iframe>
				</div>
			{:else}
				<div class="error-container">
					<p>Não foi possível carregar o vídeo. Verifique a URL.</p>
				</div>
			{/if}
		</div>
	</div>
{/if}

<style>
	/* ... seu CSS continua o mesmo ... */
    .overlay {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: rgba(17, 24, 39, 0.8);
		backdrop-filter: blur(4px);
		z-index: 1000;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.modal-content {
		position: relative;
		background: var(--cor-branca);
		border-radius: var(--raio-borda);
		width: 90%;
		max-width: 800px;
		box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
	}

	.close-btn {
		position: absolute;
		top: -35px;
		right: -10px;
		background: transparent;
		border: none;
		color: var(--cor-branca);
		font-size: 2.5rem;
		cursor: pointer;
		opacity: 0.8;
		transition: opacity 0.2s;
	}

	.close-btn:hover {
		opacity: 1;
	}

	.video-container {
		position: relative;
		padding-bottom: 56.25%; /* Proporção 16:9 */
		height: 0;
		overflow: hidden;
		border-radius: var(--raio-borda);
		background: #000;
	}

	iframe {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
	}

	.error-container {
		padding: 2rem;
		text-align: center;
		font-family: var(--fonte-titulo);
	}
</style>
// src/lib/types.ts
export interface Influencer {
	id: number;
	slug: string; // <-- ADICIONE ESTA LINHA
	nome: string;
	arroba: string;
	nicho: string;
	foto_url: string;
	foto_placeholder_url: string;
	bio: string;
	instagram_link: string;
	contato_link: string;
	video_url: string;
}
/* --- FONTES DO GOOGLE --- */
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&family=Inter:wght@400;500&display=swap');

/* --- VARIÁVEIS GLOBAIS (DESIGN TOKENS) --- */
:root {
    --cor-fundo: #FFFFFF;
    --cor-texto: #111827;
    --cor-texto-suave: #6b7280;
    --cor-borda: #E5E7EB;
    --cor-destaque: #4F46E5; /* Roxo/Índigo como novo destaque */
    --cor-branca: #FFFFFF;
    --fonte-serif: 'Playfair Display', serif; /* Fonte de título mais elegante */
    --fonte-sans: 'Inter', sans-serif; /* Fonte de texto ultra legível */
    --sombra-card: 0 4px 12px rgba(0, 0, 0, 0.05);
    --raio-borda: 8px;
}

/* --- RESET BÁSICO E ESTILOS GLOBAIS --- */
*,
*::before,
*::after {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: var(--fonte-sans);
    color: var(--cor-texto);
    background: var(--cor-fundo);
    line-height: 1.6;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

img {
    max-width: 100%;
    height: auto;
    display: block;
}
